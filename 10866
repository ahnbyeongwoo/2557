import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;
import java.util.Deque;
import java.util.StringTokenizer;
import java.io.*;
import java.util.*;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringBuilder sb = new StringBuilder();//마지막 한번에 출력 sb에 문자열 저장
        Deque<Integer> deque = new LinkedList<>();

        int N = Integer.parseInt(br.readLine());//15
        int last = 0;
        for (int i = 0; i < N; i++) {
            StringTokenizer st = new StringTokenizer(br.readLine());// 한 줄을 읽어와 공백을 기준으로 문자열을 분리
            String S = st.nextToken();//push_front,pop_back등

            switch (S) {
                case "push_front":
                    last = Integer.parseInt(st.nextToken());//정수 X 표현
                    deque.addFirst(last);
                    break;
                case "push_back":
                    last = Integer.parseInt(st.nextToken());
                    deque.addLast(last);
                    break;

                case "pop_front":
                    if (deque.isEmpty()) sb.append(-1).append("\n");
                    else sb.append(deque.removeFirst()).append("\n");// Deque의 앞에서 제거, 비어있으면 예외
                    break;
                case "pop_back":
                    if (deque.isEmpty()) sb.append(-1).append("\n");
                    else sb.append(deque.removeLast()).append("\n");
                    break;

                case "size":
                    sb.append(deque.size()).append("\n");
                    break;

                case "empty":
                    if (deque.isEmpty()) sb.append(1).append("\n");
                    else sb.append(0).append("\n");
                    break;

                case "front":
                    if (deque.isEmpty()) sb.append(-1).append("\n");
                    else sb.append(deque.getFirst()).append("\n");// 첫 번째 엘리먼트를 확인, 비어있으면 예외
                    break;

                case "back":
                    if (deque.isEmpty()) sb.append(-1).append("\n");
                    else sb.append(deque.getLast()).append("\n");// 마지막 엘리먼트를 확인, 비어있으면 예외

                    break;


            }
        }
        System.out.println(sb);

    }
}
